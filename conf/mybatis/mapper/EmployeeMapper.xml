<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mybatis.dao.EmployeeMapper">
  <select id="getEmpById" resultType="com.example.mybatis.bean.Employee">
   <!-- 
    namespace:指定为借口全类名
    #{id}:从传递过来的参数中去除id值 -->
    select id,last_name lastName,email,gender  from tbl_employee where id = #{id}
  </select>
  <select id="getEmpById" resultType="Employee" databaseId="oracle">
      select EMPNO id,ENAME lastName from EMP where EMPNO=#{id}
  </select>
  
  <select id="selectEmp" resultType="Employee">
   <!-- 
    #{id}:从传递过来的参数中取id值 -->
    select * from tbl_employee where id = #{id}
  </select>
  
  <!--  public Employee getEmpByIdAndLastName(Integer id,String lastName);-->
 	<select id="getEmpByIdAndLastName" resultType="com.example.mybatis.bean.Employee">
 		select * from tbl_employee where id = #{id} and last_name=#{lastName}
 	</select>
 	
 	<select id="getEmpByMap" resultType="com.example.mybatis.bean.Employee">
 	    select * from tbl_employee where id =#{id} and last_name=#{lastName}
 	</select>
  <!--public void addEmp(Employee employee);  -->
  <!--parameterType可以省略的 
  获取自增主键的值：
    mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
	useGeneratedKeys="true"；使用自增主键获取主键值策略
	keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，
	将这个值封装给javaBean的哪个属性 -->
  <insert id="addEmp" parameterType="Employee" 
        useGeneratedKeys="true" keyProperty="id">
     insert into tbl_employee (last_name,email,gender)
     values(#{lastName},#{email},#{gender})
  </insert>
  <!-- 
	获取非自增主键的值：
		Oracle不支持自增；Oracle使用序列来模拟自增；
		每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；
	 -->
  <insert id="addEmp" databaseId="oracle">
     <!-- keyProperty:查处的主键值封装给javaBean的那个属性
          order="BEFORE":当前sql在插入sql之前运行
          order="AFTER":当前sql在插入sql之后运行
          resultType="Integer":查出的数据返回值类型
        BEFORE运行顺序：
			先运行selectKey查询id的sql；查出id值封装给javaBean的id属性
			在运行插入的sql；就可以取出id属性对应的值
		AFTER运行顺序：
			先运行插入的sql（从序列中取出新值作为id）；
			再运行selectKey查询id的sql；
       -->
     <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
         <!-- 编写查询主键的sql语句 -->
         select EMPLOYEES_SEQ.nextval from dual
         <!-- AFTER：
			 select EMPLOYEES_SEQ.currval from dual -->
     </selectKey>
        <!-- 插入时主键是从序列中拿到的 -->
     insert into employee(EMPLOYEE_ID,LAST_NAME,EMAIL)
     values(#{id},#{lastName},#{email})
     <!-- AFTER：
		insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL) 
		values(employees_seq.nextval,#{lastName},#{email}) -->
  </insert>
      
  <!--public void updateEmp(Employee employee);  -->
  <update id="updateEmp">
     update tbl_employee 
         set last_name=#{lastName},email=#{email},gender=#{gender}
            where id=#{id}
  </update>
  
 <!--public void deleteEmp(Integer id); -->
  <delete id="deleteEmp">
     delete from tbl_employee where id=#{id}
  </delete>
  
  <!-- public List<Employee> getEmpsByLastNameLike(String lastName);
       如果返回的是一个集合,返回类型要写集合内元素的类型
   -->
  <select id="getEmpsByLastNameLike" resultType="Employee">
      select * from tbl_employee where last_name like #{lastName }
  </select>
  <!-- public Map<String,Object> getEmpsByReturnMap(Integer id); -->
  <select id="getEmpsByReturnMap" resultType="map">
      select * from tbl_employee where id=#{id}
  </select>
  <!-- 	public Map<String, Employee> getEmpsByLastNameLikeReturnMap(String lastName);-->
  <select id="getEmpsByLastNameLikeReturnMap" resultType="Employee">
      select * from tbl_employee where last_name like #{lastName}
  </select>
</mapper>