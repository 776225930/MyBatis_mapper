<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper  namespace="com.example.mybatis.dao.EmployeeMapperPlus">
       <!--自定义某个javaBean的封装规则
	       type：自定义规则的Java类型
	       id:唯一id方便引用
	  -->
       <resultMap type="com.example.mybatis.bean.Employee" id="MyEmp">
           <!--指定主键列的封装规则
		     id定义主键会底层有优化；
		     column：指定哪一列
		     property：指定对应的javaBean属性
		    -->
           <id column="id" property="id"/>
           <result column="last_name" property="lastName"/>
           <!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 -->
		   <result column="email" property="email"/>
		   <result column="gender" property="gender"/>
       </resultMap>
       <!-- Employee getEmpById(Integer id);
        resultMap-->
       <select id="getEmpById"   resultMap="MyEmp">
          select * from tbl_employee where id=#{id}
       </select>  
       <!-- 
                               联合查询：级联属性封装
        -->
       <resultMap type="com.example.mybatis.bean.Employee" id="MyDifEmp">
            <id column="id" property="id"/>
            <result column="last_Name" property="lastName"/>
            <result column="gender" property="gender"/>
            <result column="did" property="dept.id"/>
            <result column="dept_Name" property="dept.departmentName"/>
       </resultMap>
       <!-- association:指定联合的javaBean对象
            property="dept":指定哪个属性是联合的对象
            javaType：指定这个属性对象的类型
         -->
       <resultMap type="com.example.mybatis.bean.Employee" id="MyDifEmp2">
            <id column="id" property="id"/>
            <result column="last_Name" property="lastName"/>
            <result column="gender" property="gender"/>
            <result column="email" property="email"/>
            <association property="dept" javaType="com.example.mybatis.bean.Department">
               <id column="did" property="id"/>
               <result column="dept_Name" property="departmentName"/>
            </association>
       </resultMap>
       <!-- public  Employee getEmpAndDept(Integer id); -->
       <select id="getEmpAndDept"   resultMap="MyDifEmp2">
          SELECT e.id id,e.last_Name last_Name,e.gender,e.email,e.d_id,
           d.id did,d.dept_Name FROM tbl_employee e,tbl_dept d 
           WHERE e.d_id=d.id AND e.id=#{id}
       </select>  
       
       <resultMap type="com.example.mybatis.bean.Employee" id="MyEmpByStep">
            <id column="id" property="id"/>
            <result column="last_Name" property="lastName"/>
            <result column="email" property="email"/>
            <result column="gender" property="gender"/>
           <!--association定义关联对象的封装规则
           select:表明当前属性是调用select指定方法查出的结果
           column:指定将哪一列的值传递给这个方法
             -->
            <association property="dept" 
                select="com.example.mybatis.dao.DepartmentMapper.getDeptById"
                column="d_id"></association>
       </resultMap>
       <!-- 使用association进行分步查询 :
            1.先按员工id查询员工信息
            2.根据员工信息中的d_id值取部门表中查询不部门信息
            3.设置部门信息到员工信息中
       -->
       
        <!--association 可以使用延迟加载,分段查询的基础之上加两个配置-->
       <!-- public Employee getEmpByIdStep(Integer id); -->
        <select id="getEmpByIdStep" resultMap="MyDisEmp">
            select * from tbl_employee where id=#{id}
        </select>
        <!-- 
                                   场景二:
         -->
        <!-- public List<Employee> getEmpsByDeptId(Integer deptId); -->
        <select id="getEmpsByDeptId" resultType="com.example.mybatis.bean.Employee">
            select * from tbl_employee where d_id=#{deptId}
        </select>
        <!-- <discriminator javaType=""></discriminator>
                                 鉴别器:mybatis可以使用discriminator判断某列的值,然后根据某列的值改变封装行为
                                封装Employee为例:
             		 如果查出的是女生：就把部门信息查询出来，否则不查询；
					 如果是男生，把last_name这一列的值赋值给email;               
          -->
        <resultMap type="com.example.mybatis.bean.Employee" id="MyDisEmp">
        <id column="id" property="id"/>
            <result column="last_Name" property="lastName"/>
            <result column="email" property="email"/>
            <result column="gender" property="gender"/>
            <!-- column:指定判定的列名
                                                   列值对应的java类型
                  -->
            <discriminator javaType="string" column="gender">
                 <!-- 女生  resultType:指定封装的结果类型 -->
                 <case value="0" resultType="com.example.mybatis.bean.Employee">
                 <association property="dept" 
                select="com.example.mybatis.dao.DepartmentMapper.getDeptById"
                column="d_id">
            </association>
                 </case>
                 <!-- 男生 -->
                 <case value="1" resultType="com.example.mybatis.bean.Employee">
                 	 <result column="last_Name" property="lastName"/>
            		 <result column="last_Name" property="email"/>
           			 <result column="gender" property="gender"/>
                 </case>
            </discriminator>
            
        </resultMap>
</mapper>